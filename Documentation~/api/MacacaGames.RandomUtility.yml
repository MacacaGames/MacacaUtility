### YamlMime:ManagedReference
items:
- uid: MacacaGames.RandomUtility
  commentId: T:MacacaGames.RandomUtility
  id: RandomUtility
  parent: MacacaGames
  children:
  - MacacaGames.RandomUtility.GetRandomString(System.Int32)
  - MacacaGames.RandomUtility.Random(System.String,System.Int32)
  - MacacaGames.RandomUtility.RandomIndexByWeight(System.Collections.Generic.IList{System.Int32})
  - MacacaGames.RandomUtility.RandomItemByWeight``1(System.Collections.Generic.IList{System.ValueTuple{``0,System.Int32}},System.Int32)
  - MacacaGames.RandomUtility.Shuffle``1(System.Collections.Generic.IList{``0})
  - MacacaGames.RandomUtility.ShuffleWithSeed``1(System.Collections.Generic.IList{``0},System.String)
  langs:
  - csharp
  - vb
  name: RandomUtility
  nameWithType: RandomUtility
  fullName: MacacaGames.RandomUtility
  type: Class
  source:
    remote:
      path: Scripts/Utilitys/RandomUtility.cs
      branch: master
      repo: https://github.com/MacacaGames/MacacaUtility.git
    id: RandomUtility
    path: ../Scripts/Utilitys/RandomUtility.cs
    startLine: 9
  assemblies:
  - Macaca.Utility
  namespace: MacacaGames
  syntax:
    content: public static class RandomUtility
    content.vb: Public Module RandomUtility
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: MacacaGames.RandomUtility.Shuffle``1(System.Collections.Generic.IList{``0})
  commentId: M:MacacaGames.RandomUtility.Shuffle``1(System.Collections.Generic.IList{``0})
  id: Shuffle``1(System.Collections.Generic.IList{``0})
  isExtensionMethod: true
  parent: MacacaGames.RandomUtility
  langs:
  - csharp
  - vb
  name: Shuffle<T>(IList<T>)
  nameWithType: RandomUtility.Shuffle<T>(IList<T>)
  fullName: MacacaGames.RandomUtility.Shuffle<T>(System.Collections.Generic.IList<T>)
  type: Method
  source:
    remote:
      path: Scripts/Utilitys/RandomUtility.cs
      branch: master
      repo: https://github.com/MacacaGames/MacacaUtility.git
    id: Shuffle
    path: ../Scripts/Utilitys/RandomUtility.cs
    startLine: 18
  assemblies:
  - Macaca.Utility
  namespace: MacacaGames
  summary: "\nShuffle a array\n"
  example: []
  syntax:
    content: public static IList<T> Shuffle<T>(this IList<T> source)
    parameters:
    - id: source
      type: System.Collections.Generic.IList{{T}}
      description: The source array
    typeParameters:
    - id: T
      description: Type of the array
    return:
      type: System.Collections.Generic.IList{{T}}
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Shuffle(Of T)(source As IList(Of T)) As IList(Of T)
  overload: MacacaGames.RandomUtility.Shuffle*
  nameWithType.vb: RandomUtility.Shuffle(Of T)(IList(Of T))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: MacacaGames.RandomUtility.Shuffle(Of T)(System.Collections.Generic.IList(Of T))
  name.vb: Shuffle(Of T)(IList(Of T))
- uid: MacacaGames.RandomUtility.ShuffleWithSeed``1(System.Collections.Generic.IList{``0},System.String)
  commentId: M:MacacaGames.RandomUtility.ShuffleWithSeed``1(System.Collections.Generic.IList{``0},System.String)
  id: ShuffleWithSeed``1(System.Collections.Generic.IList{``0},System.String)
  isExtensionMethod: true
  parent: MacacaGames.RandomUtility
  langs:
  - csharp
  - vb
  name: ShuffleWithSeed<T>(IList<T>, String)
  nameWithType: RandomUtility.ShuffleWithSeed<T>(IList<T>, String)
  fullName: MacacaGames.RandomUtility.ShuffleWithSeed<T>(System.Collections.Generic.IList<T>, System.String)
  type: Method
  source:
    remote:
      path: Scripts/Utilitys/RandomUtility.cs
      branch: master
      repo: https://github.com/MacacaGames/MacacaUtility.git
    id: ShuffleWithSeed
    path: ../Scripts/Utilitys/RandomUtility.cs
    startLine: 36
  assemblies:
  - Macaca.Utility
  namespace: MacacaGames
  summary: "\nShuffle a array with a seed, you will always get the same result with same seed\n"
  example: []
  syntax:
    content: public static IList<T> ShuffleWithSeed<T>(this IList<T> source, string seed)
    parameters:
    - id: source
      type: System.Collections.Generic.IList{{T}}
      description: The source array
    - id: seed
      type: System.String
      description: The seed to shuffle, Seed length must more then source length
    typeParameters:
    - id: T
      description: Type of the array
    return:
      type: System.Collections.Generic.IList{{T}}
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ShuffleWithSeed(Of T)(source As IList(Of T), seed As String) As IList(Of T)
  overload: MacacaGames.RandomUtility.ShuffleWithSeed*
  nameWithType.vb: RandomUtility.ShuffleWithSeed(Of T)(IList(Of T), String)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: MacacaGames.RandomUtility.ShuffleWithSeed(Of T)(System.Collections.Generic.IList(Of T), System.String)
  name.vb: ShuffleWithSeed(Of T)(IList(Of T), String)
- uid: MacacaGames.RandomUtility.RandomIndexByWeight(System.Collections.Generic.IList{System.Int32})
  commentId: M:MacacaGames.RandomUtility.RandomIndexByWeight(System.Collections.Generic.IList{System.Int32})
  id: RandomIndexByWeight(System.Collections.Generic.IList{System.Int32})
  parent: MacacaGames.RandomUtility
  langs:
  - csharp
  - vb
  name: RandomIndexByWeight(IList<Int32>)
  nameWithType: RandomUtility.RandomIndexByWeight(IList<Int32>)
  fullName: MacacaGames.RandomUtility.RandomIndexByWeight(System.Collections.Generic.IList<System.Int32>)
  type: Method
  source:
    remote:
      path: Scripts/Utilitys/RandomUtility.cs
      branch: master
      repo: https://github.com/MacacaGames/MacacaUtility.git
    id: RandomIndexByWeight
    path: ../Scripts/Utilitys/RandomUtility.cs
    startLine: 63
  assemblies:
  - Macaca.Utility
  namespace: MacacaGames
  summary: "\nGet the index of random item by weight;\n"
  example: []
  syntax:
    content: public static int RandomIndexByWeight(IList<int> itemWeightList)
    parameters:
    - id: itemWeightList
      type: System.Collections.Generic.IList{System.Int32}
      description: ''
    return:
      type: System.Int32
      description: ''
    content.vb: Public Shared Function RandomIndexByWeight(itemWeightList As IList(Of Integer)) As Integer
  overload: MacacaGames.RandomUtility.RandomIndexByWeight*
  nameWithType.vb: RandomUtility.RandomIndexByWeight(IList(Of Int32))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: MacacaGames.RandomUtility.RandomIndexByWeight(System.Collections.Generic.IList(Of System.Int32))
  name.vb: RandomIndexByWeight(IList(Of Int32))
- uid: MacacaGames.RandomUtility.RandomItemByWeight``1(System.Collections.Generic.IList{System.ValueTuple{``0,System.Int32}},System.Int32)
  commentId: M:MacacaGames.RandomUtility.RandomItemByWeight``1(System.Collections.Generic.IList{System.ValueTuple{``0,System.Int32}},System.Int32)
  id: RandomItemByWeight``1(System.Collections.Generic.IList{System.ValueTuple{``0,System.Int32}},System.Int32)
  parent: MacacaGames.RandomUtility
  langs:
  - csharp
  - vb
  name: RandomItemByWeight<T>(IList<(T item, Int32 weight)>, Int32)
  nameWithType: RandomUtility.RandomItemByWeight<T>(IList<(T item, Int32 weight)>, Int32)
  fullName: MacacaGames.RandomUtility.RandomItemByWeight<T>(System.Collections.Generic.IList<System.ValueTuple<T, System.Int32>>, System.Int32)
  type: Method
  source:
    remote:
      path: Scripts/Utilitys/RandomUtility.cs
      branch: master
      repo: https://github.com/MacacaGames/MacacaUtility.git
    id: RandomItemByWeight
    path: ../Scripts/Utilitys/RandomUtility.cs
    startLine: 85
  assemblies:
  - Macaca.Utility
  namespace: MacacaGames
  summary: "\nGet the index of random item by weight;\n"
  example: []
  syntax:
    content: public static IList<T> RandomItemByWeight<T>(IList<(T item, int weight)> itemWeightList, int pickAmount = 1)
    parameters:
    - id: itemWeightList
      type: System.Collections.Generic.IList{System.ValueTuple{{T},System.Int32}}
      description: ''
    - id: pickAmount
      type: System.Int32
    typeParameters:
    - id: T
    return:
      type: System.Collections.Generic.IList{{T}}
      description: ''
    content.vb: Public Shared Function RandomItemByWeight(Of T)(itemWeightList As IList(Of(item As T, weight As Integer)), pickAmount As Integer = 1) As IList(Of T)
  overload: MacacaGames.RandomUtility.RandomItemByWeight*
  nameWithType.vb: RandomUtility.RandomItemByWeight(Of T)(IList(Of (item As T, weight As Int32)), Int32)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: MacacaGames.RandomUtility.RandomItemByWeight(Of T)(System.Collections.Generic.IList(Of System.ValueTuple(Of T, System.Int32)), System.Int32)
  name.vb: RandomItemByWeight(Of T)(IList(Of (item As T, weight As Int32)), Int32)
- uid: MacacaGames.RandomUtility.GetRandomString(System.Int32)
  commentId: M:MacacaGames.RandomUtility.GetRandomString(System.Int32)
  id: GetRandomString(System.Int32)
  parent: MacacaGames.RandomUtility
  langs:
  - csharp
  - vb
  name: GetRandomString(Int32)
  nameWithType: RandomUtility.GetRandomString(Int32)
  fullName: MacacaGames.RandomUtility.GetRandomString(System.Int32)
  type: Method
  source:
    remote:
      path: Scripts/Utilitys/RandomUtility.cs
      branch: master
      repo: https://github.com/MacacaGames/MacacaUtility.git
    id: GetRandomString
    path: ../Scripts/Utilitys/RandomUtility.cs
    startLine: 118
  assemblies:
  - Macaca.Utility
  namespace: MacacaGames
  summary: "\nGet a random string\n"
  example: []
  syntax:
    content: public static string GetRandomString(int length)
    parameters:
    - id: length
      type: System.Int32
      description: The length of the string
    return:
      type: System.String
      description: A random string
    content.vb: Public Shared Function GetRandomString(length As Integer) As String
  overload: MacacaGames.RandomUtility.GetRandomString*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: MacacaGames.RandomUtility.Random(System.String,System.Int32)
  commentId: M:MacacaGames.RandomUtility.Random(System.String,System.Int32)
  id: Random(System.String,System.Int32)
  parent: MacacaGames.RandomUtility
  langs:
  - csharp
  - vb
  name: Random(String, Int32)
  nameWithType: RandomUtility.Random(String, Int32)
  fullName: MacacaGames.RandomUtility.Random(System.String, System.Int32)
  type: Method
  source:
    remote:
      path: Scripts/Utilitys/RandomUtility.cs
      branch: master
      repo: https://github.com/MacacaGames/MacacaUtility.git
    id: Random
    path: ../Scripts/Utilitys/RandomUtility.cs
    startLine: 134
  assemblies:
  - Macaca.Utility
  namespace: MacacaGames
  summary: "\nGet a random string makes by the source string\n"
  example: []
  syntax:
    content: public static string Random(string source, int length = 8)
    parameters:
    - id: source
      type: System.String
      description: The char source
    - id: length
      type: System.Int32
      description: The result of the result
    return:
      type: System.String
      description: The result random string
    content.vb: Public Shared Function Random(source As String, length As Integer = 8) As String
  overload: MacacaGames.RandomUtility.Random*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
references:
- uid: MacacaGames
  commentId: N:MacacaGames
  name: MacacaGames
  nameWithType: MacacaGames
  fullName: MacacaGames
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: MacacaGames.RandomUtility.Shuffle*
  commentId: Overload:MacacaGames.RandomUtility.Shuffle
  name: Shuffle
  nameWithType: RandomUtility.Shuffle
  fullName: MacacaGames.RandomUtility.Shuffle
- uid: System.Collections.Generic.IList{{T}}
  commentId: T:System.Collections.Generic.IList{``0}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IList`1
  name: IList<T>
  nameWithType: IList<T>
  fullName: System.Collections.Generic.IList<T>
  nameWithType.vb: IList(Of T)
  fullName.vb: System.Collections.Generic.IList(Of T)
  name.vb: IList(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IList`1
  commentId: T:System.Collections.Generic.IList`1
  isExternal: true
  name: IList<T>
  nameWithType: IList<T>
  fullName: System.Collections.Generic.IList<T>
  nameWithType.vb: IList(Of T)
  fullName.vb: System.Collections.Generic.IList(Of T)
  name.vb: IList(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: MacacaGames.RandomUtility.ShuffleWithSeed*
  commentId: Overload:MacacaGames.RandomUtility.ShuffleWithSeed
  name: ShuffleWithSeed
  nameWithType: RandomUtility.ShuffleWithSeed
  fullName: MacacaGames.RandomUtility.ShuffleWithSeed
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: MacacaGames.RandomUtility.RandomIndexByWeight*
  commentId: Overload:MacacaGames.RandomUtility.RandomIndexByWeight
  name: RandomIndexByWeight
  nameWithType: RandomUtility.RandomIndexByWeight
  fullName: MacacaGames.RandomUtility.RandomIndexByWeight
- uid: System.Collections.Generic.IList{System.Int32}
  commentId: T:System.Collections.Generic.IList{System.Int32}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IList`1
  name: IList<Int32>
  nameWithType: IList<Int32>
  fullName: System.Collections.Generic.IList<System.Int32>
  nameWithType.vb: IList(Of Int32)
  fullName.vb: System.Collections.Generic.IList(Of System.Int32)
  name.vb: IList(Of Int32)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: MacacaGames.RandomUtility.RandomItemByWeight*
  commentId: Overload:MacacaGames.RandomUtility.RandomItemByWeight
  name: RandomItemByWeight
  nameWithType: RandomUtility.RandomItemByWeight
  fullName: MacacaGames.RandomUtility.RandomItemByWeight
- uid: System.Collections.Generic.IList{System.ValueTuple{{T},System.Int32}}
  commentId: T:System.Collections.Generic.IList{System.ValueTuple{``0,System.Int32}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IList`1
  name: IList<ValueTuple<T, Int32>>
  nameWithType: IList<ValueTuple<T, Int32>>
  fullName: System.Collections.Generic.IList<System.ValueTuple<T, System.Int32>>
  nameWithType.vb: IList(Of ValueTuple(Of T, Int32))
  fullName.vb: System.Collections.Generic.IList(Of System.ValueTuple(Of T, System.Int32))
  name.vb: IList(Of ValueTuple(Of T, Int32))
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.ValueTuple`2
    name: ValueTuple
    nameWithType: ValueTuple
    fullName: System.ValueTuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.ValueTuple`2
    name: ValueTuple
    nameWithType: ValueTuple
    fullName: System.ValueTuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: MacacaGames.RandomUtility.GetRandomString*
  commentId: Overload:MacacaGames.RandomUtility.GetRandomString
  name: GetRandomString
  nameWithType: RandomUtility.GetRandomString
  fullName: MacacaGames.RandomUtility.GetRandomString
- uid: MacacaGames.RandomUtility.Random*
  commentId: Overload:MacacaGames.RandomUtility.Random
  name: Random
  nameWithType: RandomUtility.Random
  fullName: MacacaGames.RandomUtility.Random
